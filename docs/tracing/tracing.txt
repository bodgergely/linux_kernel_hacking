Kernel Tracing
==============

/sys/kernel/debug/tracing
-------------------------

See: Documentation/trace/ftrace.rst

$ cat available_tracers
hwlat blk mmiotrace function_graph wakeup_dl wakeup_rt wakeup function nop

$ echo function_graph > current_tracer

$ cat available_filter_functions | grep vfs_write
$ echo vfs_write > set_graph_function
$ echo 1 > tracing_on
$ cat trace         # disables tracing while reading this file
$ cat trace_pipe    # does not disable, stream based
$ echo 0 > tracing_on

You can trace events that are named by TRACE_EVENT macro.

Trace an event:
    - write event name to set_event
    - read trace_pipe


$ echo workqueue:workqueue_queue_work > /sys/kernel/debug/tracing/set_event
$ cat /sys/kernel/debug/tracing/trace_pipe > out.txt
	(wait a few secs)
	^C

Trace scheduler events:
    sched.h defines with TRACE_EVENT quite a few.

    TRACE_EVENT(sched_switch

$ echo sched:sched_switch > /sys/kernel/debug/tracing/set_event
$ cat /sys/kernel/debug/tracing/trace_pipe > /tmp/sched_traces.txt
$ cat /tmp/sched_traces.txt | awk '{print $11}' | awk -F'=' '{print $2}' | sort | uniq -c | less


bpftrace
========

List tracepoints with glob:
$bpftrace -l 'tracepoint:syscalls:sys_enter_*'

List all tracepoints: (then grep for the one you are looking for)
$ bpftrace -l

Print syscalls on system, except syscall number 1 (open)
$ sudo bpftrace -e 'tracepoint:raw_syscalls:sys_enter /args->id != 1/ { printf("%d,%s\n", args->id, comm) }'

Count syscall types:
$ sudo bpftrace -e 'tracepoint:raw_syscalls:sys_enter { @[args->id]=count(); }'

Syscalls per process:
$ bpftrace -e 'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'
